<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>将鸣潮bot全部丢到docker中运行</title>
    <link href="/2025/04/22/%E5%B0%86%E9%B8%A3%E6%BD%AEbot%E5%85%A8%E9%83%A8%E4%B8%A2%E5%88%B0docker%E4%B8%AD%E8%BF%90%E8%A1%8C/"/>
    <url>/2025/04/22/%E5%B0%86%E9%B8%A3%E6%BD%AEbot%E5%85%A8%E9%83%A8%E4%B8%A2%E5%88%B0docker%E4%B8%AD%E8%BF%90%E8%A1%8C/</url>
    
    <content type="html"><![CDATA[<p>上一篇文章我搭起来了基于GsCore的鸣潮TelegramBot，结果在前几天，我的VPS莫名其妙宕机了一下（服务稳定性不行啊你这），直接重启了，导致丢在screen中运行的程序都停止了。于是决定一不做二不休，直接将本来丢在screen的nonebot和gensokyo全部丢到docker中运行，保证VPS重启了服务也能自行恢复运行。</p><h1 id="nonebot部署到docker"><a href="#nonebot部署到docker" class="headerlink" title="nonebot部署到docker"></a>nonebot部署到docker</h1><p>nonebot部署到docker相对比较简单，其nb脚手架已经有插件来生成<code>Dockerfile</code>和<code>docker-compose.yml</code>了</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 首先是声明依赖</span><br><span class="hljs-built_in">source</span> ~/wuwa/.venv/bin/activate <span class="hljs-comment"># 进入bot的虚拟环境，自行将~/wuwa替换为自己的bot项目路径</span><br>pip freeze &gt; requirements.txt <span class="hljs-comment"># 使用 requirements.txt 文件来声明依赖</span><br><span class="hljs-comment"># 安装脚手架的docker插件</span><br>nb self install nb-cli-plugin-docker <br><span class="hljs-comment"># 生成Dockerfile和docker-compose.yml</span><br>nb docker generate <span class="hljs-comment"># 在你的bot项目目录中执行，如~/wuwa/，此时会在bot根目录中生成Dockerfile和docker-compose.yml</span><br></code></pre></td></tr></table></figure><p>然后由于与GsCore通信的需要，修改一下<code>docker-compose.yml</code>。将其中<code>PORTS</code>部分删除，替换为如下部分</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">network_mode: host<br><span class="hljs-comment"># 其实添加一个8765端口的映射可能也可以，但是不太确定GenshinUID插件与GsCore通信的逻辑，所以用host最省心且确认没问题</span><br></code></pre></td></tr></table></figure><p>替换之后就可以启动容器了</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">nb docker up<br><span class="hljs-comment"># 用nb脚手架查看日志和停止容器的命令如下，当然直接用docker的相关命令也是可以的</span><br>nb docker logs<br>nb docker down<br></code></pre></td></tr></table></figure><h1 id="Gensokyo-Telegram部署到docker"><a href="#Gensokyo-Telegram部署到docker" class="headerlink" title="Gensokyo-Telegram部署到docker"></a>Gensokyo-Telegram部署到docker</h1><p>Gensokyo-Telegram目前并没有相关docker镜像也没有什么便捷操作，于是需要我们自己写<code>Dockerfile</code>和<code>docker-compose.yml</code>。<br>因为这只是一个简单的可执行二进制文件，所以其实也非常简单。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> ~/gensokyo<br>nano Dockerfile <span class="hljs-comment"># vim Dockerfile</span><br></code></pre></td></tr></table></figure><p>具体Dockerfile内容如下</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">FROM alpine:3.18<br>WORKDIR /gensokyo-tg<br>COPY . .<br>RUN <span class="hljs-built_in">chmod</span> +x gensokyo<br>CMD [<span class="hljs-string">&quot;./gensokyo&quot;</span>]<br></code></pre></td></tr></table></figure><p>保存，然后再<code>nano docker-compose.yml</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sh">version: <span class="hljs-string">&#x27;3.8&#x27;</span><br><br>services:<br>  gensokyo:<br>    build: .<br>    image: gensokyo-tg<br>    container_name: gensokyo-tg<br>    network_mode: host<br>    volumes:<br>      - /root/gensokyo:/gensokyo-tg <span class="hljs-comment"># 这里冒号前的路径需要是自己gensokyo文件夹的路径，如果全程跟我的教程一样的话那就可以照抄</span><br>    restart: unless-stopped<br></code></pre></td></tr></table></figure><p>保存，然后就可以启动了</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker compose up -d --build<br></code></pre></td></tr></table></figure><p>不出意外就顺利启动，以后就不用担心VPS莫名其妙宕机一秒导致服务全挂了XD</p>]]></content>
    
    
    <categories>
      
      <category>给自己写的教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WutheringWave</tag>
      
      <tag>鸣潮</tag>
      
      <tag>Bot</tag>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>配置基于GsCore的鸣潮TelegramBOT</title>
    <link href="/2025/04/19/%E9%85%8D%E7%BD%AE%E5%9F%BA%E4%BA%8Egscore%E7%9A%84%E9%B8%A3%E6%BD%AETelegramBOT/"/>
    <url>/2025/04/19/%E9%85%8D%E7%BD%AE%E5%9F%BA%E4%BA%8Egscore%E7%9A%84%E9%B8%A3%E6%BD%AETelegramBOT/</url>
    
    <content type="html"><![CDATA[<p>“漂泊者工坊小助手”的声骸评价用起来实在是不太令人满意。最近发现了一款新的Q群机器人，声骸评价更加合理，且有自动签到等功能，但是又懒得找有机器人的Q群加，于是决定自己部署一个机器人，并配置为TelegramBot，避免本地运行的困扰。</p><p>VPS环境：2c4g，系统为Debian12。</p><blockquote><p>写在前面，目前已知的小问题：</p><ul><li>由于Telegram的压缩机制，图片在手机上确实有点糊，不过总的来说还是能看清的。电脑上查看会好一些。</li><li>设置面板图等部分命令无法使用，估计原因是OnebotV11标准对Telegram的消息格式适配不好，毕竟本来是给QQ用的嘛。不过主要的声骸评分等命令都是没问题的</li></ul></blockquote><h1 id="配置GsCore"><a href="#配置GsCore" class="headerlink" title="配置GsCore"></a>配置GsCore</h1><h2 id="拉取GsCore"><a href="#拉取GsCore" class="headerlink" title="拉取GsCore"></a>拉取GsCore</h2><p>与官方文档不同，我使用了Docker Compose进行配置，默认已经完成Docker的安装。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">git <span class="hljs-built_in">clone</span> https://github.com/Genshin-bots/gsuid_core.git --depth=1 --single-branch<br><span class="hljs-comment">#然后进入文件夹</span><br><span class="hljs-built_in">cd</span> gsuid_core<br></code></pre></td></tr></table></figure><h2 id="启动Docker-Compose"><a href="#启动Docker-Compose" class="headerlink" title="启动Docker Compose"></a>启动Docker Compose</h2><blockquote><p>只要是近期安装的docker应该都是使用<code>docker compose</code>命令吧，旧版请自行替换为<code>docker-compose</code></p></blockquote><p>先修改一下docker compose文件吧，不知道作者出于什么目的修改了端口。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">......<br>    ports:<br>      <span class="hljs-comment"># 改的就是这里！！！本来是18765，我改回8765端口了</span><br>      - 8765:8765<br>......<br></code></pre></td></tr></table></figure><p>然后先启动一下</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 初次安装，执行以下指令：</span><br>docker compose up -d --build<br><span class="hljs-comment"># 试着打开http://IP:8765/genshinuid, 可以打开的话说明docker启动成功了</span><br></code></pre></td></tr></table></figure><p>记得先修改一下用户密码，默认账户密码是<code>root/root</code>，在左边栏寻找用户管理以修改密码</p><h2 id="配置master"><a href="#配置master" class="headerlink" title="配置master"></a>配置master</h2><p>GsCore还有一份无法在网页设置的config，设置好master之后才能直接在机器人用命令安装插件。</p><blockquote><p><code>config.json</code>文件位于<code>opt/gsuid_core_data/config.json</code></p></blockquote><p>先到<a href="https://t.me/userinfobot">UserInfoBot</a>获取自己的账号ID。<br>用<code>nano</code>或者<code>vim</code>打开<code>config.json</code>文件之后，配置如下部分</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-string">&quot;masters&quot;</span>: [<br>   <span class="hljs-string">&quot;&lt;你的ID&gt;&quot;</span> // master权限账号, 类型为List[string], 对应权限pm=0。<br> ],<br></code></pre></td></tr></table></figure><p>其他的可以不管，以后用到了再了解。<br>然后别忘了重启一下docker compose让配置生效</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 先回到gsuid_core文件夹再执行</span><br>docker compose down<br><span class="hljs-comment"># 除了第一次启动之外以后都不需要带--build参数</span><br>docker compose up -d<br></code></pre></td></tr></table></figure><h2 id="设置图片发送"><a href="#设置图片发送" class="headerlink" title="设置图片发送"></a>设置图片发送</h2><p>由于后续tgbot的webhook使用自签名证书，出现了奇奇怪怪的证书问题，所以在这里需要提前设置一下图片的发送格式<br>进入GsCore的管理面板<code>http://IP:8765/genshinuid</code><br>在侧边栏找到<code>修改插件设定</code>一项，在<code>core</code>一栏，启用将图片转链接发送(需公网)，并且设置转链接为<code>http://IP:8765</code><br><img src="https://nekonya.one/picx-images-hosting/20250419/image.pfj80dlck.webp" alt="图片转链接发送"><br>然后在<code>GsCore发送图片</code>一栏，将<code>Onebot图片发送方式</code>改为<code>link_local</code><br><img src="https://nekonya.one/picx-images-hosting/20250419/image.5q7lzkl8l6.webp" alt="link_local"></p><h1 id="配置nonebot"><a href="#配置nonebot" class="headerlink" title="配置nonebot"></a>配置nonebot</h1><p>目前各类Q群机器人（当然我们是要部署到tgbot上）以我的理解大致分为三层。<br>最上层就是我们刚刚配置好的Gscore，这部分负责具体的数据获得与处理。然后是中间层，负责沟通最上层与最下层。最下层就是具体负责发送消息的部分。</p><blockquote><p>小吐槽：因为目前生态都是基于各类土法QQ机器人的，显得尤为屎山代码。。。虽然说这样模块化的设计倒也不是没有意义就是。但是完全可以由Gscore直接对接某个符合例如onebotV12标准（尽可能通用化的标准，目前我的了解只有onebotV12）的Bot，省去中间层，变得更加轻量化而易于部署</p></blockquote><p>所以这部分要配置的NoneBot就属于中间层的部分</p><h2 id="安装nonebot"><a href="#安装nonebot" class="headerlink" title="安装nonebot"></a>安装nonebot</h2><p>nonebot我没找到可以直接用docker的，所以直接部署到本机了<br>首先确认Python版本&gt;&#x3D;3.9，并且官方文档也强烈建议使用虚拟环境<br>作为一个标准懒狗，安装什么的肯定都是让<code>apt</code>代劳啦。以后遇到问题了再研究吧。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 如果没安装python的话，用apt安装</span><br><span class="hljs-comment"># apt install python3</span><br><span class="hljs-comment"># 然后就需要安装pipx。pipx能自动使用虚拟环境安装各种程序，相较pip更加方便。</span><br>apt install pipx<br>pipx ensurepath<br><span class="hljs-comment"># 安装完成之后重新连接一下ssh让环境变量生效</span><br></code></pre></td></tr></table></figure><p>然后安装nb脚手架</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">pipx install nb-cli<br></code></pre></td></tr></table></figure><p>脚手架安装完毕也就算安装好了，接下来是配置部分</p><h2 id="配置nonebot-1"><a href="#配置nonebot-1" class="headerlink" title="配置nonebot"></a>配置nonebot</h2><p>使用脚手架创建项目</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">nb create<br></code></pre></td></tr></table></figure><p>如此会进入脚手架的交互式创建流程中。命名请自行选择，我命名为<code>wuwa</code>，以下都用<code>wuwa</code>为参考。<br>交互式安装过程我就不截图了。<br>具体来说：<br>模板: bootstrap<br>适配器: OneBot V11<br>驱动器: FastAPI，HTTPX，websockets。<br>立即安装依赖: Yes<br>创建虚拟环境: Yes<br>内置插件不需要安装，直接回车。<br>这样一个nonebot项目就创建好了，文件都在<code>./wuwa</code>里</p><h2 id="安装GenshinUID"><a href="#安装GenshinUID" class="headerlink" title="安装GenshinUID"></a>安装GenshinUID</h2><p>GenshinUID是一个nonebot的插件,用于连接GsCore与nonebot。<br>我们以用户模式安装即可</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 进入nonebot项目文件</span><br><span class="hljs-built_in">cd</span> wuwa<br><span class="hljs-comment"># 输入命令安装插件</span><br>nb plugin install nonebot-plugin-genshinuid<br></code></pre></td></tr></table></figure><p>这样noneot就配置好了。<br>由于nonebot启动后会一直在终端输出日志，直接使用最懒狗的<code>screen</code>大法解决</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">screen -S wuwa<br>nb run<br><span class="hljs-comment"># 之后可以用screen -r wuwa来回到这个screen，screen -ls可以查看全部screen</span><br><span class="hljs-comment"># 确认没问题了用快捷键Ctrl+a+d离开screen</span><br></code></pre></td></tr></table></figure><h1 id="配置Gensokyo-Telegram"><a href="#配置Gensokyo-Telegram" class="headerlink" title="配置Gensokyo-Telegram"></a>配置Gensokyo-Telegram</h1><p>OnebotV11标准是为QQbot设计的，最后在Github找到了由<a href="https://github.com/Hoshinonyaruko">Hoshinonyaruko</a>开发的符合OnebotV11标准的TelegramBot。总体用起来还是能满足需求的。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 获取Gensokyo-Telegram</span><br><span class="hljs-built_in">cd</span> ~<br><span class="hljs-built_in">mkdir</span> -p gensokyo &amp;&amp; <span class="hljs-built_in">cd</span> gensokyo<br>wget -O gensokyo https://github.com/Hoshinonyaruko/Gensokyo-Telegram/releases/download/4%2Fmerge/gensokyo-linux-amd64<br><span class="hljs-comment"># 先启动一次以生成配置文件</span><br>./gensokyo<br></code></pre></td></tr></table></figure><p>此时会在<code>~/gensokyo/</code>中生成<code>config.yml</code>。用nano或者vim打开并编辑</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 主要关注这些项目</span><br>  ws_address: [<span class="hljs-string">&quot;ws://127.0.0.1:8080/onebot/v11/ws&quot;</span>]<br>  ws_token: [<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;&quot;</span>]                                <br>  botToken: <span class="hljs-string">&quot;xxxxxxx:xxxxxxx......xxxxx&quot;</span>                                    <span class="hljs-comment"># 在telegram软件内botfather获取 例子 111260888:BBFf5h2cSDoUZctABCD-spo0b2dG4gyEGEG</span><br>  webHookPath : <span class="hljs-string">&quot;https://your.domain.com:PORT/&quot;</span>                                     <span class="hljs-comment"># 你的Webhook地址，端口可以选择80、443、8443、88。比如我就因为443已经被网站占用了因此选择8443。</span><br>  httpGetMsg : <span class="hljs-literal">false</span>                                   <span class="hljs-comment"># 如果你不打算使用webhook,那么使用http轮询获取api(强烈建议使用webhook)</span><br>  <span class="hljs-comment"># 使用轮询的话那么后面证书什么的都不用管了，webHookPath也不用管</span><br>  ......<br>  timeOut : 30                                          <span class="hljs-comment"># 等待反向ws信息超时时间,默认4秒,这里改成30秒，原因是获取与生成图片的确实是有点慢。。。</span><br>  ......<br>  server_dir: <span class="hljs-string">&quot;your.domain.com&quot;</span>                    <br>  port: <span class="hljs-string">&quot;PORT&quot;</span>                                        <span class="hljs-comment"># 这个PORT和上面webhootpath的保持一致</span><br>  ......<br>  identify_file : <span class="hljs-literal">true</span>               <span class="hljs-comment"># 自动生成域名校验文件。</span><br>  ......<br>  customcert : <span class="hljs-literal">true</span>                  <span class="hljs-comment"># telegram默认支持自签名证书,省去配置ssl烦恼.进阶用户也可使用nginx反代部署机器人.</span><br>  ......<br>    server_user_name : <span class="hljs-string">&quot;admin&quot;</span>    <span class="hljs-comment">#默认网页面板用户名</span><br>  server_user_password : <span class="hljs-string">&quot;YourPasswd&quot;</span>    <span class="hljs-comment">#默认网页面板密码，自己修改防止安全问题</span><br></code></pre></td></tr></table></figure><p>这样就配置好了，还是用screen启动并使其后台运行</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">screen -S gensokyo<br>./gensokyo<br></code></pre></td></tr></table></figure><p>不出意外这样Bot已经可以运行了，可以试着向你的Bot发送<code>帮助</code>，运行正常的话这会已经会有反应了。</p><h2 id="安装WutheringWaveUID插件"><a href="#安装WutheringWaveUID插件" class="headerlink" title="安装WutheringWaveUID插件"></a>安装WutheringWaveUID插件</h2><p>再次进入GsCore的管理面板<code>http://IP:8765/genshinuid</code>。<br>在<strong>插件管理</strong>下安装插件<br>或者直接对bot发送<code>core安装插件WutheringWavesUID</code>。之前已经配置好master账户了，合理没问题。</p><h1 id="安装完毕！开始使用鸣潮bot吧"><a href="#安装完毕！开始使用鸣潮bot吧" class="headerlink" title="安装完毕！开始使用鸣潮bot吧"></a>安装完毕！开始使用鸣潮bot吧</h1><p>这样就算安装完毕了，发送<code>ww帮助</code>可以获得命令帮助。自行绑定token和UID之后就可以开始愉快使用了。token获取方法与其他小程序相同，也可以直接在库街区cookie中获得。</p>]]></content>
    
    
    <categories>
      
      <category>给自己写的教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Debian</tag>
      
      <tag>WutheringWave</tag>
      
      <tag>鸣潮</tag>
      
      <tag>Bot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>以编译的方式安装NGINX（Debian）</title>
    <link href="/2025/04/09/%E4%BB%A5%E7%BC%96%E8%AF%91%E7%9A%84%E6%96%B9%E5%BC%8F%E5%AE%89%E8%A3%85NGINX%EF%BC%88Debian%EF%BC%89/"/>
    <url>/2025/04/09/%E4%BB%A5%E7%BC%96%E8%AF%91%E7%9A%84%E6%96%B9%E5%BC%8F%E5%AE%89%E8%A3%85NGINX%EF%BC%88Debian%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>某家机子跑路了，之前用lnmp脚本部署的网站都得重新来，鉴于前几年lnmp的投毒事件，这次决定手动编译安装Nginx。</p><h2 id="安装前置依赖"><a href="#安装前置依赖" class="headerlink" title="安装前置依赖"></a>安装前置依赖</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">apt install  build-essential libpcre3 libpcre3-dev libssl-dev<br></code></pre></td></tr></table></figure><p>我那台机子的话只安装这些依赖就够了，具体缺什么依赖之后在设置<code>./counfigure</code>时会有报错的，照着安装就是</p><h2 id="配置Nginx系统用户"><a href="#配置Nginx系统用户" class="headerlink" title="配置Nginx系统用户"></a>配置Nginx系统用户</h2><p>考虑到安全因素，我们有必要设置一个用户来运行Nginx，限制进程权限</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">adduser --system --no-create-home --group www  <span class="hljs-comment"># Debian</span><br><span class="hljs-comment">#或者adduser --system --group www</span><br><span class="hljs-comment">#区别是下面这个会创建/home/www，以后放网站文件也是好的，当然完全可以先不创建，用到了在mkdir</span><br></code></pre></td></tr></table></figure><h2 id="下载Nginx并解压进入文件夹"><a href="#下载Nginx并解压进入文件夹" class="headerlink" title="下载Nginx并解压进入文件夹"></a>下载Nginx并解压进入文件夹</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">wget https://nginx.org/download/nginx-1.26.3.tar.gz <span class="hljs-comment">#链接自行替换为想要的版本，可以去nginx.org/download中找</span><br>tar -zxvf nginx-1.26.3.tar.gz &amp;&amp; <span class="hljs-built_in">cd</span> nginx-1.26.3<br></code></pre></td></tr></table></figure><h2 id="编译参数配置并编译"><a href="#编译参数配置并编译" class="headerlink" title="编译参数配置并编译"></a>编译参数配置并编译</h2><p>通过<code>./configure</code>进行配置，示例如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sh">./configure \<br>--user=www \<br>--group=www \<br>--with-http_ssl_module \<br>--with-http_gzip_static_module \<br>--with-http_stub_status_module \<br>--with-http_v2_module \<br>--with-http_v3_module \<br>--with-http_realip_module \<br>--with-stream \<br>--with-stream_ssl_module \<br>--with-stream_ssl_preread_module \<br></code></pre></td></tr></table></figure><p>以上是我用的配置，用户名与之前创建的新用户一致，模块可以参考<a href="https://nginx.org/en/docs/configure.html">Nginx官网文档</a>，根据自己需要添加。</p><p><code>./configure</code>完成后就可以编译了</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">make &amp;&amp; make install<br></code></pre></td></tr></table></figure><p>不出意外的话编译完成后的Nginx就在’&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx’了，可以用’&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx -V’试一试。</p><h2 id="添加PATH"><a href="#添加PATH" class="headerlink" title="添加PATH"></a>添加PATH</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">nano /etc/profile<br></code></pre></td></tr></table></figure><p>在文件末尾添加：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$PATH</span>:/usr/local/nginx/sbin <span class="hljs-comment">#仅适合本教程，请根据实际路径修改</span><br></code></pre></td></tr></table></figure><p>保存后执行</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">source</span> /etc/profile<br></code></pre></td></tr></table></figure><p>即成功添加到PATH且永久有效</p><p>验证</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">nginx -v <span class="hljs-comment">#应输出版本号</span><br></code></pre></td></tr></table></figure><h2 id="添加到systemd并允许开机自启"><a href="#添加到systemd并允许开机自启" class="headerlink" title="添加到systemd并允许开机自启"></a>添加到systemd并允许开机自启</h2><h3 id="配置service"><a href="#配置service" class="headerlink" title="配置service"></a>配置service</h3><p>在 &#x2F;etc&#x2F;systemd&#x2F;system&#x2F; 目录下新建 nginx.service 文件：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim /etc/systemd/system/nginx.service<br></code></pre></td></tr></table></figure><p>内容如下：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[Unit]</span><br><span class="hljs-attr">Description</span>=The NGINX HTTP and reverse proxy server<br><span class="hljs-attr">After</span>=network.target<br><br><span class="hljs-section">[Service]</span><br><span class="hljs-attr">Type</span>=forking<br><span class="hljs-attr">PIDFile</span>=/usr/local/nginx/logs/nginx.pid  <span class="hljs-comment"># 编译安装的PID路径</span><br><span class="hljs-attr">ExecStartPre</span>=/usr/local/nginx/sbin/nginx -t  <span class="hljs-comment"># 检查配置</span><br><span class="hljs-attr">ExecStart</span>=/usr/local/nginx/sbin/nginx<br><span class="hljs-attr">ExecReload</span>=/usr/local/nginx/sbin/nginx -s reload<br><span class="hljs-attr">ExecStop</span>=/usr/local/nginx/sbin/nginx -s quit<br><span class="hljs-attr">PrivateTmp</span>=<span class="hljs-literal">true</span><br><br><span class="hljs-section">[Install]</span><br><span class="hljs-attr">WantedBy</span>=multi-user.target<br></code></pre></td></tr></table></figure><h3 id="设置并启用服务"><a href="#设置并启用服务" class="headerlink" title="设置并启用服务"></a>设置并启用服务</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 重新加载 systemd 配置</span><br><span class="hljs-built_in">sudo</span> systemctl daemon-reload<br><br><span class="hljs-comment"># 启动 Nginx 服务</span><br><span class="hljs-built_in">sudo</span> systemctl start nginx<br><br><span class="hljs-comment"># 设置开机自启</span><br><span class="hljs-built_in">sudo</span> systemctl <span class="hljs-built_in">enable</span> nginx<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>给自己写的教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Nginx</tag>
      
      <tag>Debian</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sublime-text破解技巧</title>
    <link href="/2024/09/15/sublime-text%E7%A0%B4%E8%A7%A3%E6%8A%80%E5%B7%A7/"/>
    <url>/2024/09/15/sublime-text%E7%A0%B4%E8%A7%A3%E6%8A%80%E5%B7%A7/</url>
    
    <content type="html"><![CDATA[<p>Sublime Text作为一款非常好用的文本编辑器，其售价确实是让我这个学生党却步。今晚更新了一下Sublime Text，直接给我之前的激活整没了，找了一小会才重新找到能用的破解方法，写个blog权当记录。</p><p>Sublime Text Version：4180</p><p>在下载安装好Sublime Text之后，找到sublime_text.exe这个本体，将其上传至<a href="https://hexed.it/">hexed.it</a>这个Hex编辑器。</p><p>然后在右侧，查找<code>80 79 05 00 0F 94 C2</code>，并将其替换为<code>C6 41 05 01 B2 00 90</code>。</p><p><img src="https://ahaguawazi233.github.io/picx-images-hosting/image.5j45iiv0vh.webp" alt="HEX编辑器，查找替换都在右侧"></p><p>回到原目录，将原本的sublime_text.exe删了（或者改成sublime_text.exe.bak权当备份）</p><p>回到编辑器，点击另存为，将修改后的exe文件命名为sublime_text.exe并取代原本的位置。这样就破解好了，打开sublime text会发现已经是激活状态了。</p>]]></content>
    
    
    <categories>
      
      <category>给自己写的教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>sublime text</tag>
      
      <tag>破解</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo Fluid访问统计：使用自建Umami实现(包括PV、UV统计)</title>
    <link href="/2024/09/07/Fluid%E8%AE%BF%E9%97%AE%E7%BB%9F%E8%AE%A1%EF%BC%9A%E4%BD%BF%E7%94%A8%E8%87%AA%E5%BB%BAumami%E5%AE%9E%E7%8E%B0/"/>
    <url>/2024/09/07/Fluid%E8%AE%BF%E9%97%AE%E7%BB%9F%E8%AE%A1%EF%BC%9A%E4%BD%BF%E7%94%A8%E8%87%AA%E5%BB%BAumami%E5%AE%9E%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<p>本教程适用与fluid版本1.9.8</p><p>在发稿前2周，Umami更新了api格式，导致1.9.8的Umami配置无法使用，需要手动进行调整。经过一整天的折腾，总算是搞定了。</p><h1 id="修改Fluid的Umami-view-js"><a href="#修改Fluid的Umami-view-js" class="headerlink" title="修改Fluid的Umami-view.js"></a>修改Fluid的Umami-view.js</h1><p>参考<a href="https://github.com/fluid-dev/hexo-theme-fluid/pull/1126">这个</a>，我们需要修改umami-vieew.js<br>（位于本地的 .&#x2F;node_modules&#x2F;hexo-theme-fluid&#x2F;source&#x2F;js 中）</p>    <div class="fold">      <div class="fold-title fold-info collapsed" data-toggle="collapse" href="#collapse-8f7bdefe" role="button" aria-expanded="false" aria-controls="collapse-8f7bdefe">        <div class="fold-arrow">▶</div>js文件全内容，可以前往github直接查看      </div>      <div class="fold-collapse collapse" id="collapse-8f7bdefe">        <div class="fold-content">          <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 从配置文件中获取 umami 的配置</span><br><span class="hljs-keyword">const</span> website_id = <span class="hljs-variable constant_">CONFIG</span>.<span class="hljs-property">web_analytics</span>.<span class="hljs-property">umami</span>.<span class="hljs-property">website_id</span>;<br><span class="hljs-comment">// 拼接请求地址</span><br><span class="hljs-comment">// 第一处修改</span><br><span class="hljs-comment">// const request_url = `$&#123;CONFIG.web_analytics.umami.api_server&#125;/websites/$&#123;website_id&#125;/stats`;</span><br><span class="hljs-keyword">const</span> request_url = <span class="hljs-string">`<span class="hljs-subst">$&#123;CONFIG.web_analytics.umami.api_server&#125;</span>/api/websites/<span class="hljs-subst">$&#123;website_id&#125;</span>/stats`</span>;<br><br><span class="hljs-keyword">const</span> start_time = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-variable constant_">CONFIG</span>.<span class="hljs-property">web_analytics</span>.<span class="hljs-property">umami</span>.<span class="hljs-property">start_time</span>).<span class="hljs-title function_">getTime</span>();<br><span class="hljs-keyword">const</span> end_time = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().<span class="hljs-title function_">getTime</span>();<br><span class="hljs-keyword">const</span> token = <span class="hljs-variable constant_">CONFIG</span>.<span class="hljs-property">web_analytics</span>.<span class="hljs-property">umami</span>.<span class="hljs-property">token</span>;<br><br><span class="hljs-comment">// 检查配置是否为空</span><br><span class="hljs-keyword">if</span> (!website_id) &#123;<br>  <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;Umami website_id is empty&quot;</span>);<br>&#125;<br><span class="hljs-keyword">if</span> (!request_url) &#123;<br>  <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;Umami request_url is empty&quot;</span>);<br>&#125;<br><span class="hljs-keyword">if</span> (!start_time) &#123;<br>  <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;Umami start_time is empty&quot;</span>);<br>&#125;<br><span class="hljs-keyword">if</span> (!token) &#123;<br>  <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;Umami token is empty&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">// 构造请求参数</span><br><span class="hljs-keyword">const</span> params = <span class="hljs-keyword">new</span> <span class="hljs-title class_">URLSearchParams</span>(&#123;<br>  <span class="hljs-attr">startAt</span>: start_time,<br>  <span class="hljs-attr">endAt</span>: end_time,<br>&#125;);<br><span class="hljs-comment">// 构造请求头</span><br><span class="hljs-keyword">const</span> request_header = &#123;<br>  <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;GET&quot;</span>,<br>  <span class="hljs-attr">headers</span>: &#123;<br>    <span class="hljs-string">&quot;Content-Type&quot;</span>: <span class="hljs-string">&quot;application/json&quot;</span>,<br>    <span class="hljs-comment">// 第二处修改</span><br>    <span class="hljs-comment">// &quot;x-umami-api-key&quot;: &quot;oZKCH3msvqt10VlXKwoJvHclmaS4bVx0&quot;,</span><br>    <span class="hljs-string">&quot;Authorization&quot;</span>: <span class="hljs-string">&quot;Bearer &quot;</span> + token,<br>  &#125;,<br>&#125;;<br><br><span class="hljs-comment">// 获取站点统计数据</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">siteStats</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;request_url&#125;</span>?<span class="hljs-subst">$&#123;params&#125;</span>`</span>, request_header);<br>    <span class="hljs-keyword">const</span> data = <span class="hljs-keyword">await</span> response.<span class="hljs-title function_">json</span>();<br>    <span class="hljs-comment">// 第三处修改</span><br>    <span class="hljs-comment">// const uniqueVisitors = data.uniques.value; </span><br>    <span class="hljs-keyword">const</span> uniqueVisitors = data.<span class="hljs-property">visitors</span>.<span class="hljs-property">value</span>; <span class="hljs-comment">// 获取独立访客数</span><br>    <span class="hljs-keyword">const</span> pageViews = data.<span class="hljs-property">pageviews</span>.<span class="hljs-property">value</span>; <span class="hljs-comment">// 获取页面浏览量</span><br><br>    <span class="hljs-keyword">let</span> pvCtn = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;#umami-site-pv-container&quot;</span>);<br>    <span class="hljs-keyword">if</span> (pvCtn) &#123;<br>      <span class="hljs-keyword">let</span> ele = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;#umami-site-pv&quot;</span>);<br>      <span class="hljs-keyword">if</span> (ele) &#123;<br>        ele.<span class="hljs-property">textContent</span> = pageViews; <span class="hljs-comment">// 设置页面浏览量</span><br>        pvCtn.<span class="hljs-property">style</span>.<span class="hljs-property">display</span> = <span class="hljs-string">&quot;inline&quot;</span>; <span class="hljs-comment">// 将元素显示出来</span><br>      &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">let</span> uvCtn = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;#umami-site-uv-container&quot;</span>);<br>    <span class="hljs-keyword">if</span> (uvCtn) &#123;<br>      <span class="hljs-keyword">let</span> ele = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;#umami-site-uv&quot;</span>);<br>      <span class="hljs-keyword">if</span> (ele) &#123;<br>        ele.<span class="hljs-property">textContent</span> = uniqueVisitors;<br>        uvCtn.<span class="hljs-property">style</span>.<span class="hljs-property">display</span> = <span class="hljs-string">&quot;inline&quot;</span>;<br>      &#125;<br>    &#125;<br>  &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(error);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;-1&quot;</span>;<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 获取页面浏览量</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">pageStats</span>(<span class="hljs-params">path</span>) &#123;<br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;request_url&#125;</span>?<span class="hljs-subst">$&#123;params&#125;</span>&amp;url=<span class="hljs-subst">$&#123;path&#125;</span>`</span>, request_header);<br>    <span class="hljs-keyword">const</span> data = <span class="hljs-keyword">await</span> response.<span class="hljs-title function_">json</span>();<br>    <span class="hljs-keyword">const</span> pageViews = data.<span class="hljs-property">pageviews</span>.<span class="hljs-property">value</span>;<br><br>    <span class="hljs-keyword">let</span> viewCtn = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;#umami-page-views-container&quot;</span>);<br>    <span class="hljs-keyword">if</span> (viewCtn) &#123;<br>      <span class="hljs-keyword">let</span> ele = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;#umami-page-views&quot;</span>);<br>      <span class="hljs-keyword">if</span> (ele) &#123;<br>        ele.<span class="hljs-property">textContent</span> = pageViews;<br>        viewCtn.<span class="hljs-property">style</span>.<span class="hljs-property">display</span> = <span class="hljs-string">&quot;inline&quot;</span>;<br>      &#125;<br>    &#125;<br>  &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(error);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;-1&quot;</span>;<br>  &#125;<br>&#125;<br><br><span class="hljs-title function_">siteStats</span>();<br><br><span class="hljs-comment">// 获取页面容器</span><br><span class="hljs-keyword">let</span> viewCtn = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;#umami-page-views-container&quot;</span>);<br><span class="hljs-comment">// 如果页面容器存在，则获取页面浏览量</span><br><span class="hljs-keyword">if</span> (viewCtn) &#123;<br>  <span class="hljs-keyword">let</span> path = <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">pathname</span>;<br>  <span class="hljs-keyword">let</span> target = <span class="hljs-built_in">decodeURI</span>(path.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/\/*(index.html)?$/</span>, <span class="hljs-string">&quot;/&quot;</span>));<br>  <span class="hljs-title function_">pageStats</span>(target);<br>&#125;<br><br></code></pre></td></tr></table></figure>        </div>      </div>    </div><h1 id="部署umami并添加网站"><a href="#部署umami并添加网站" class="headerlink" title="部署umami并添加网站"></a>部署umami并添加网站</h1><h2 id="docker-compose-部署"><a href="#docker-compose-部署" class="headerlink" title="docker compose 部署"></a>docker compose 部署</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">git <span class="hljs-built_in">clone</span> https://github.com/umami-software/umami.git<br><span class="hljs-built_in">cd</span> umami<br>docker-compose up -d<br></code></pre></td></tr></table></figure><p>此时umami运行在ip:3000上，直接访问即可进入控制面板。接下来可以配置nginx反向代理等，在此不赘述。</p><h2 id="登录admin并添加新用户和网站"><a href="#登录admin并添加新用户和网站" class="headerlink" title="登录admin并添加新用户和网站"></a>登录admin并添加新用户和网站</h2><p>登录umami控制面板，默认账号密码是</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">username:</span> admin<br><span class="hljs-symbol">password:</span> umami<br></code></pre></td></tr></table></figure><p>建议进入控制面板后立刻修改密码以保证安全。</p><p>登入后，点击设置-&gt;用户-&gt;创建用户，然后创建一个用户权限的新用户，密码用户名自定。<br><img src="https://ahaguawazi233.github.io/picx-images-hosting/20240907/image.3yee8mbwd9.webp" alt="创建新用户"></p><p>用无痕模式（或者另外一个浏览器）登录这个新用户，点击添加网站，将自己的网站填写下去。在网站的编辑界面查看跟踪代码，其中有我们需要的js文件地址和website id。</p><p>退出这个账户，切回admin，将这个账户的权限改成仅浏览，umami部分基本大功告成。</p><h1 id="完成主题配置"><a href="#完成主题配置" class="headerlink" title="完成主题配置"></a>完成主题配置</h1><p>按照注释完成配置，其中js文件地址和website id就是我们刚才获取的。</p><p>token获取需要在<a href="https://hoppscotch.io/">Hoppscotch</a>获取</p><p>如下图，输入umami的地址（<a href="https://your.domain.com/api/auth/login%EF%BC%89%EF%BC%8C%E7%82%B9%E5%87%BBbody%EF%BC%8C%E9%80%89%E6%8B%A9Content">https://your.domain.com/api/auth/login），点击body，选择Content</a> Type为application&#x2F;json，然后填入（权限为仅浏览的）用户名和密码，将图里的“GET”改成“POST”，再点击send，就能获取到token了。</p><p><img src="https://ahaguawazi233.github.io/picx-images-hosting/20240907/image.969ovmfmo3.webp" alt="token获取过程"></p><p>完成配置后，再进行</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">hexo c<br>hexo g<br>hexo d<br></code></pre></td></tr></table></figure><p>不出意外即可成功应用啦</p><p>参考文献：</p><ol><li><a href="https://immmmm.com/hi-umami-api/">前端调用 Umami API 数据 -by 林木木</a></li><li><a href="https://umami.is/docs">umami官方文档</a></li><li><a href="https://github.com/fluid-dev/hexo-theme-fluid/pull/1126">修复不能正确获取Umami统计信息的问题 -committed by OrdChaos</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>给自己写的教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>fluid</tag>
      
      <tag>Umami</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>从Wordpress到Hexo：Why and How</title>
    <link href="/2024/09/06/%E4%BB%8EWordpress%E5%88%B0Hexo%EF%BC%9AWhy-How/"/>
    <url>/2024/09/06/%E4%BB%8EWordpress%E5%88%B0Hexo%EF%BC%9AWhy-How/</url>
    
    <content type="html"><![CDATA[<p>经过一整天的查教程调配置，终于是把Hexo调成现在的模样，并把之前的文章一并导入了。趁着这个机会，记录一下我为什么要从Wordpress迁移到Hexo，以及我是如何迁移旧文章、配置Hexo到我自己的VPS的。</p><h1 id="为什么要从Wordpress迁移到Hexo"><a href="#为什么要从Wordpress迁移到Hexo" class="headerlink" title="为什么要从Wordpress迁移到Hexo"></a>为什么要从Wordpress迁移到Hexo</h1><p>Wordpress几乎是世界上使用最广泛、可玩性最佳、可用性最好的博客了，但是我在使用的过程中还是遇到了一部分问题：</p><ul><li>Wordpress的性能要求太高了，我那1c1g的VPS带动这么一个博客实在是有点勉强，不能说不能用吧，总之是非常容易满负载，并且网站响应速度也不够令人满意</li><li>Wordpress的后台操作复杂，插件多且杂，很多功能需要依赖插件实现，导致后台臃肿，而有很多功能我并不需要</li><li>Wordpress的主题也令人不甚满意。大量主题并不符合我的审美，好不容易找到一个看得上的了，却又问题频发，时不时就得进入维护模式，最后我只能用回Wordpress原始的主题。</li></ul><p>上面这些问题令我越发觉得Wordpress并不适合作为我的博客，考虑到网站响应速度，决定一不做二不休直接改成静态的Hexo。</p><h1 id="如何配置Hexo到自己的VPS上"><a href="#如何配置Hexo到自己的VPS上" class="headerlink" title="如何配置Hexo到自己的VPS上"></a>如何配置Hexo到自己的VPS上</h1><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><p>Hexo作为一个静态博客，与我以往接触的Wordpress、Typecho等动态博客不同，它没有一个可视化的后台，所有操作都要通过CLI进行。还有一个更大的区别，就是Hexo一般只是deploy到服务器（或者github库）上，而没有一个直接的可执行文件安装到服务器上。大概来说是下述步骤：配置node.js -&gt; 安装Hexo -&gt; 配置git -&gt; 配置Hexo</p><p><em>（以下过程为本地Windows 11 + 服务器Debian11）</em></p><h3 id="配置node-js"><a href="#配置node-js" class="headerlink" title="配置node.js"></a>配置node.js</h3><p><a href="https://hexo.io/zh-cn/docs/">官网的文档</a>推荐使用nvs安装node.js。<br>打开“终端（管理员模式）”,使用winget来安装<a href="https://github.com/jasongin/nvs">nvs</a>：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">winget install jasongin.nvs<br></code></pre></td></tr></table></figure><p>修改镜像地址为中科大源</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">nvs remote node https://mirrors.ustc.edu.cn/node/<br><span class="hljs-comment"># 查看修改是否成功</span><br><span class="hljs-comment"># nvs remote</span><br><span class="hljs-comment"># 修改成功则会有上述镜像站</span><br></code></pre></td></tr></table></figure><p><img src="https://ahaguawazi233.github.io/picx-images-hosting/20240906/image.5tqz06ftxl.webp" alt="修改镜像源后"></p><p>安装LTS版本</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">nvs add lts<br></code></pre></td></tr></table></figure><p>然后运行nvs use命令将节点版本添加到当前 shell 的 PATH 中：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">nvs use lts<br></code></pre></td></tr></table></figure><p><em>或者用 nvs link 命令永久添加到 PATH 中</em></p><p>然后配置npm源：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">npm config <span class="hljs-built_in">set</span> registry https://npmreg.proxy.ustclug.org/<br></code></pre></td></tr></table></figure><p>至此node.js配置完成，如果重新开启shell了需要重新nvs use。</p><h3 id="安装Hexo-1"><a href="#安装Hexo-1" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><p>使用npm安装Hexo。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">npm install -g hexo-cli<br></code></pre></td></tr></table></figure><p>同时安装接下来需要的模块：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">npm install hexo-deployer-git --save<br>npm install hexo-migrator-wordpress --save<br></code></pre></td></tr></table></figure><h3 id="配置git"><a href="#配置git" class="headerlink" title="配置git"></a>配置git</h3><p>本地安装git直接下载<a href="https://git-scm.com/downloads">安装包</a>进行安装即可。</p><p>服务器安装：<br>使用apt（centOS系使用yum）安装git：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">sudo</span> apt install git-all<br></code></pre></td></tr></table></figure><p>创建git用户：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 依次执行</span><br>adduser git<br><br><span class="hljs-built_in">mkdir</span> /home/git<br><br><span class="hljs-built_in">sudo</span> passwd git<br></code></pre></td></tr></table></figure><p>将git用户添加为sudoer:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">visudo<br></code></pre></td></tr></table></figure><p>(或者看系统具体情况，像我的话是直接在&#x2F;etc&#x2F;sudoers.d里添加文件即可)</p><p>在sudoer文件中添加以下配置：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">git <span class="hljs-keyword">ALL</span>=(<span class="hljs-keyword">ALL</span>) NOPASSWD:<span class="hljs-keyword">ALL</span><br></code></pre></td></tr></table></figure><p>由于Hexo是使用git将本地的静态文件推送到服务器的git上，所以需要配置一下免密登录：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 切换到git用户</span><br>su git<br><br><span class="hljs-comment"># 创建.ssh文件夹存放公钥</span><br><span class="hljs-built_in">cd</span> ~<br><span class="hljs-built_in">mkdir</span> .ssh<br><br><span class="hljs-comment"># 接下来可以使用现有的密钥或者生成新的密钥，使用现有密钥的不再赘述，依样画葫芦即可</span><br></code></pre></td></tr></table></figure><p>在本地计算机打开git Bash：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> ~<br><span class="hljs-built_in">cd</span> .ssh<br>ssh-keygen<br></code></pre></td></tr></table></figure><p>按照程序提示完成，最后生成的公私钥存储在’C:\Users\ _你的用户名_\ .ssh’下</p><p>将’id_rsa.pub’上传至服务器的’&#x2F;home&#x2F;git&#x2F;.ssh’目录下并执行以下命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> /home/git/.ssh<br><span class="hljs-built_in">cp</span> id_rsa.pub authorized_keys<br><br><span class="hljs-comment"># 设置权限</span><br><span class="hljs-built_in">chmod</span> 600 ~/.ssh/authorized_keys<br><span class="hljs-built_in">chmod</span> 700 ~/.ssh<br><br><span class="hljs-comment"># 确保 SSH 相关的文件和目录具有正确的 SELinux 安全标签</span><br>restorecon -Rv ~/.ssh<br></code></pre></td></tr></table></figure><p>（使用已有的公私钥，公钥上传相同，私钥仍是copy到本地.ssh文件夹中并改名，让git可以读取私钥）</p><p>在服务器新建git仓库并配置hook</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> ~<br>git init --bare hexo.git<br>vim hexo.git/hooks/post-receive<br><span class="hljs-comment"># 输入 git --work-tree=/path/to/your/website --git-dir=/home/git/hexo.git checkout -f ，保存并退出</span><br></code></pre></td></tr></table></figure><p><img src="https://ahaguawazi233.github.io/picx-images-hosting/20240906/image.1ovdo4abrs.webp" alt="post-receive"></p><p>授予执行权限：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">chmod</span> +x ~/hexo.git/hooks/post-receive<br><span class="hljs-built_in">cd</span> ~<br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">chown</span> -R git:git /path/to/your/website<br><span class="hljs-comment"># 我是记得改文件夹所有者就行，万一不行就chmod 777吧哈哈哈哈哈</span><br></code></pre></td></tr></table></figure><p>配置本地git全局变量（在gitbash中执行）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">git config --global user.email <span class="hljs-string">&quot;xxxxx@xxx.com&quot;</span><br>git config --global user.name <span class="hljs-string">&quot;xxx&quot;</span><br></code></pre></td></tr></table></figure><p>测试配置是否成功：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 在本地git Bash中，自行修改为自己服务器的IP</span><br>ssh -v git@xxx.xxx.xxx.xxx<br></code></pre></td></tr></table></figure><h3 id="配置Hexo"><a href="#配置Hexo" class="headerlink" title="配置Hexo"></a>配置Hexo</h3><p>在上述步骤完成之后，执行以下命令完成初始化</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">hexo init /path/to/your/folder<br><span class="hljs-built_in">cd</span> /path/to/your/folder<br>npm install<br><span class="hljs-comment"># 要是关了重开别忘了重新nvs use lts一下</span><br></code></pre></td></tr></table></figure><p>修改’_config.yml’文件中的’deploy’部分</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">deploy：</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>    <span class="hljs-attr">repo:</span> <span class="hljs-string">git@xxx.xxx.xxx.xxx:/home/git/hexo.git</span><br>    <span class="hljs-attr">branch:</span> <span class="hljs-string">master</span><br></code></pre></td></tr></table></figure><p>然后在本地终端中执行</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">hexo c<br>hexo g<br>hexo d<br></code></pre></td></tr></table></figure><p>此时查看服务器网站目录可见静态文件，说明hexo部署成功</p><h2 id="配置nginx"><a href="#配置nginx" class="headerlink" title="配置nginx"></a>配置nginx</h2><p>有各种各样乱七八糟的方法配置nginx和SSL，像是宝塔面板、LNMP、以及纯手动部署……八仙过海各显神通，简单说明一下最紧要的部分吧</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs conf">server &#123;<br>    listen        80;<br>    listen   [::]:80;<br>    server_name  域名;<br><br>    rewrite ^(.*)$ https://$&#123;server_name&#125;$1 permanent;<br>&#125;<br><br>server &#123;<br>    listen  443 ssl;<br>    server_name  域名; <br><br>    ssl_certificate   存放pem的位置;<br>    ssl_certificate_key   存放key的位置;<br><br>    ssl_session_cache   shared:SSL:1m;<br>    ssl_session_timeout   5m;<br><br>    ssl_ciphers HIGH:!aNULL:!MD5;<br>    ssl_prefer_server_ciphers   on;<br>   <br>    # 以下是精华部分，本人使用lnmp，仅需在添加vhost后注释掉生成的配置文件中所有location块、注释掉原本的root和index， 并添加以下location块即可正常运行<br>    location / &#123;<br>        proxy_set_header   X-Real-IP        $remote_addr;<br>        proxy_set_header   Host             $http_host;<br>        proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;<br>        root   /path/to/your/website;<br>        index  index.html index.htm;<br>    &#125;<br>    # 以上是精华部分<br>    error_page   500 502 503 504  /50x.html;<br>    location = /50x.html &#123;<br>        root   /usr/share/nginx/html;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后reload一下nginx，没报错什么的话不出意外就可以正常访问了</p><h2 id="从Wordpress迁移到Hexo"><a href="#从Wordpress迁移到Hexo" class="headerlink" title="从Wordpress迁移到Hexo"></a>从Wordpress迁移到Hexo</h2><p>进入Wordpress控制台，工具-&gt;导出，将导出内容下载到本地，使用迁移工具进行导入<br><img src="https://ahaguawazi233.github.io/picx-images-hosting/20240906/image.1zi7hb154s.webp" alt="从Wordpress导出"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">hexo migrate wordpress /path/to/your/wordpress-archive<br><span class="hljs-comment"># /path/to/your/wordpress-archive 可以是 WordPress 导出的文件路径或网址。</span><br></code></pre></td></tr></table></figure><p>非常简单且无脑欸嘿</p><p>以上就是我迁移并部署Hexo的过程了，UI美化等过程不在此赘述，希望能对你有些帮助</p><p>参考文献：</p><ol><li><a href="https://hexo.io/zh-cn/docs/">Hexo官方文档</a></li><li><a href="https://www.cnblogs.com/cheyaoyao/p/17836522.html">使用 Hexo 搭建个人博客并部署到云服务器 -by cheyaoyao</a></li><li><a href="https://developer.aliyun.com/article/1181105">服务器搭建Hexo个人博客 -by 落墨成殇</a></li><li><a href="https://juejin.cn/post/7368484446143447077">2024年 国内npm源镜像（npm加速下载） 指定npm镜像 -by fireCloud</a></li><li><a href="https://mirrors.ustc.edu.cn/help/npm.html">USTC Mirror Help</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>给自己写的教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>Wordpress</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello Hexo</title>
    <link href="/2024/09/06/hello-world/"/>
    <url>/2024/09/06/hello-world/</url>
    
    <content type="html"><![CDATA[<h1 id="本人的Blog正式从Wordpress迁移到静态的hexo上了！-呱唧呱唧呱唧呱唧（鼓掌）"><a href="#本人的Blog正式从Wordpress迁移到静态的hexo上了！-呱唧呱唧呱唧呱唧（鼓掌）" class="headerlink" title="本人的Blog正式从Wordpress迁移到静态的hexo上了！ 呱唧呱唧呱唧呱唧（鼓掌）"></a>本人的Blog正式从Wordpress迁移到静态的hexo上了！ 呱唧呱唧呱唧呱唧（鼓掌）</h1><p>这篇文章就作为分割线一般的存在吧，前面也有一篇wordpress的“hello world” XD</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Nov. 18 2023 Sat.</title>
    <link href="/2023/11/19/nov-18-2023-sat/"/>
    <url>/2023/11/19/nov-18-2023-sat/</url>
    
    <content type="html"><![CDATA[<p>日寄！</p><p>今天好像没啥好记的，无事发生</p><p>早上10点半起的床，12点半吃的午饭</p><p>倒是有一点好玩的，晚上18:30吃的时候，本来想点金汤无骨鱼的，嘴一溜变成了金汤酸菜鱼（金汤鱼和酸菜鱼算是两个菜），最后不出意外地变成了酸菜鱼了，也挺好吃，就是咋觉得酸菜鱼的鱼量相对金汤鱼有所减少呢。</p><p>最近的温度都不是很高，寒风阵阵，吃这种汤类的是真的很舒服，暖和！</p><p>事已至此，睡觉！</p>]]></content>
    
    
    <categories>
      
      <category>日寄</category>
      
    </categories>
    
    
    <tags>
      
      <tag>日寄</tag>
      
      <tag>日记</tag>
      
      <tag>每日小结</tag>
      
      <tag>瞎bb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nov. 17 2023 Fri.</title>
    <link href="/2023/11/17/nov-17-2023-fri/"/>
    <url>/2023/11/17/nov-17-2023-fri/</url>
    
    <content type="html"><![CDATA[<p>嗯又是寄的一天。</p><p>刚刚在抽奖，大起大落落落落落落落落落。本来都锁定二等奖甚至特等奖了，然后突然说之前抽差了，补抽，中了，落成五等。</p><p>玉玉了</p><p>打了一些字，但是玉玉犯了，算了</p>]]></content>
    
    
    <categories>
      
      <category>日寄</category>
      
    </categories>
    
    
    <tags>
      
      <tag>日寄</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nov.16 2023 Thur.</title>
    <link href="/2023/11/17/nov-16-2023-thur/"/>
    <url>/2023/11/17/nov-16-2023-thur/</url>
    
    <content type="html"><![CDATA[<p>日寄时间！！！！</p><p>今天又是有早八的一天，早八还是老大难的课，还稍微迟到了，不过老师不管这个，人挺不错的。但是也因为稍微迟到吧，总之课是没兴趣听了。日子嘛，混着混着就过去了。</p><p>然后久违地炫了一杯酱香拿铁，时隔多日现在我对酱香拿铁的评价是：依托。这也算是一种均值回归？毕竟之前给好评来着，现在来说还是更喜欢普通一点的咖啡，例如马卡斯彭奶酪拿铁，这个香。</p><p>本来吧，想着喝了咖啡要起效估计也得几个小时吧，趁着刚喝完赶紧上床还能补觉一下，下午在咖啡与补觉的双重加持之下直接清醒百倍！残念，是我错了。咖啡起效得还是很快的，至少我刚喝完就上床，睡不着了，呜呜。</p><p>最近几周总是在周四的时候就觉得明天周末放假，今天也是这样，也是不知道什么毛病，或许是太想休息了？可是我寻思平时睡眠质量差归差吧，上课什么的也没认真过啊。小米运动健康出了个新功能：睡眠动物。根据你最近七天的睡眠情况给你一个对应的动物。我对应的是鲨鱼，里面也写着，鲨鱼，睡觉少且浅，甚至会边睡边游，只能说我去这根本就是我。</p><p>今天降温呢，也不是今天吧，近一个星期都在降温的过程中，很舒服。我喜欢冬天，喜欢在寒冷的天气里搓着小手。不管怎么想冬日都比夏日好多了，冷了人可以穿衣服，热了可真没办法剥皮，河坝老哥也不行。今天降温，早上8点不到的气温竟成为了今天的最高温；顺便看了一眼天气预报，下周四还有一次28℃的高温，然后速冻，我****的锋前增温。</p><p>要说有什么收获吧，今天还是有一点的，至少大项目有一点点眉目了。还得是英文资料，直接手把手教你，按着思路来就能最低要求地完成这个项目了，好好好！</p><p>夜深了，寝る。</p>]]></content>
    
    
    <categories>
      
      <category>日寄</category>
      
    </categories>
    
    
    <tags>
      
      <tag>日寄</tag>
      
      <tag>日记</tag>
      
      <tag>每日小结</tag>
      
      <tag>瞎bb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nov.15 2023 Wed.</title>
    <link href="/2023/11/16/nov-15-2023-wed/"/>
    <url>/2023/11/16/nov-15-2023-wed/</url>
    
    <content type="html"><![CDATA[<p>现在是23:37分，是时候来写一下日寄了。</p><p>早上的早八要跨越两公里之远前往，而该死的学校又禁止学生自购电动车，为了所谓的消防因素，然后校内出行方式就只剩下一下几种：步行、自购单车骑行、使用共享电动车、乘坐校内公交车。然后吧，我没买单车，小小的公交车在早八的巨大人流之下就像被数十个大姐姐用あらあら的眼神看着的小正太——难以承受之重。所以，在2公里的距离之下合理的出行方式就只剩下一种：共享电动车。所以，大家就会内卷，就会拼命的抢共享电动车。所以在我早上从床上坐起来一看时间7:32的时候，我的内心是绝望的，大抵抢不到车了罢。。当我下楼看见一整排的车的时候，内心欢呼雀跃，紧赶慢赶抢到了车，早八总归是没迟到。</p><p>现在的辅导员这一学年就要结束工作生涯开始研究生生涯了，在今天的早上我认识（？，好吧其实连名字都不知道鉴于脸盲甚至没办法认脸）在接下来会成为我们学院辅导员的，现在应该称之为，学姐。学姐现在大四，接下来走了2+3的道路会在我们学院做两年辅导员。也不知道她好不好打交道，毕竟确实有可能成为我们这一级的辅导员，目前来看，似乎还行？不过人是善变的，等她走马上任也得半年多，我不好说。</p><p>最近是真的很困啊，睡眠不足，在刚刚刷B站看到一个好玩的视频：<a href="https://www.bilibili.com/video/BV1iz4y1A7wP">【Neuron—睡眠缺乏为何引起性欲旺盛和过度躁狂？】</a>，只能说破案了🤣😋。下午上完课又狠狠补觉补了一个小时，舒服！</p><p>一个大项目的DDL接近了，勉强算是，还有一周？可是目前进度为零，好难搞，没有一点点思路，公式什么的倒不是完全不会，最次最次还能翻书嘛，但是要在项目里实践，变成可行的设计，好难。接下来查一查英文资料吧，这简中网络的资料真的是沙漠啊。或许还会有英文的教程之类的？手把手教我手搓？XD</p><p>啊话说回来又忘记背词了，本来安排了一个时间段背的，结果被占用了背不了了。。。然后吧，有一说一心里还是想学日语的，可是现在好累完全没有行动力，进度仅限五十音，每日已寄！之前还想着大二拿下N2大三拿下托福，现在能大三顺利拿下托福就谢天谢地咯。</p><p>啊写到现在0点了，那日寄就到这里吧。もうすぐ寝る時間です</p>]]></content>
    
    
    <categories>
      
      <category>日寄</category>
      
    </categories>
    
    
    <tags>
      
      <tag>日寄</tag>
      
      <tag>日记</tag>
      
      <tag>每日小结</tag>
      
      <tag>瞎bb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>写一下每日小结/日记吧</title>
    <link href="/2023/11/15/%E5%86%99%E4%B8%80%E4%B8%8B%E6%AF%8F%E6%97%A5%E5%B0%8F%E7%BB%93-%E6%97%A5%E8%AE%B0%E5%90%A7/"/>
    <url>/2023/11/15/%E5%86%99%E4%B8%80%E4%B8%8B%E6%AF%8F%E6%97%A5%E5%B0%8F%E7%BB%93-%E6%97%A5%E8%AE%B0%E5%90%A7/</url>
    
    <content type="html"><![CDATA[<p>想了一下，感觉写写日记写写小结，总结一下一天干啥了，似乎也不错？感觉可以开整</p><p>直接开始吧</p><p>Nov.14 2013</p><p>早上翘课了捏，很困很累，不想起床，果断翘了，美美地睡了一觉，还是舒服的</p><p>最近这段时间也是不知为何，是生物钟变成2点睡9点起的形状了吗？总之很难在0点出头的时刻睡着，即使是配合褪黑素也是于事无补；并且睡眠质量也很一般，碰上早八那就是彻彻底底的大灾难，2点睡觉7点起床，配合💩一般的睡眠质量，睡眠时长直接只有4小时出头，真得要死🥱</p><p>中午吃了馄饨面，一个小姐姐似乎在我起身取餐时坐了我原本的位置，在我取完餐准备回座时又恰好起来，于我而言就是我一开始的位置一直在，便心安理得坐下，可她取完餐走到我身后又似乎轻轻啧地一声，隐隐证明了前文的“似乎”，带来些许乐子。</p><p>下午数据结构是照常上了，老师不按常理出牌地在第一节下课时点名，不过倒是基本到齐。虽说这课很重要但我选择b站大学王道考研，原因只能说不言自明。下午依旧是昏昏沉沉，听着网课听着听着越来越困，终是承受不住趴下昏了一会，好多了。</p><p>又到午夜时分，明天还得早八，可我现在00:51仍在码字，罢了罢了，睡也，虽说不一定睡得着就是。</p><p>顺便一提，日寄的封面应该会是各种被我看上了的meme，毕竟meme才是支撑人的第一支柱（</p>]]></content>
    
    
    <categories>
      
      <category>日寄</category>
      
    </categories>
    
    
    <tags>
      
      <tag>日寄</tag>
      
      <tag>日记</tag>
      
      <tag>每日小结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>地铁站志愿活动体验</title>
    <link href="/2023/10/22/%E5%9C%B0%E9%93%81%E7%AB%99%E5%BF%97%E6%84%BF%E6%B4%BB%E5%8A%A8%E4%BD%93%E9%AA%8C/"/>
    <url>/2023/10/22/%E5%9C%B0%E9%93%81%E7%AB%99%E5%BF%97%E6%84%BF%E6%B4%BB%E5%8A%A8%E4%BD%93%E9%AA%8C/</url>
    
    <content type="html"><![CDATA[<p>非常充足的一天呢（指n久以前）！为了凑足志愿时，直接报名了海珠广场站5个小时的志愿，想着毕竟从未参加过，体验一下地铁站的志愿活动也挺好，溢出就溢出无所谓了😋</p><p>不得不说确实是非常新的体验，人生第一次走进了车站控制室，虽然说仅仅只是签到和领取志愿者服，但是来到这样一个高视角还是非常神奇的。<br>广州确确实实的是一个国际化的大都市，在站台值班的时候，几乎每一班车都有老外的身影。也是这一次，人生第一次被老外问路。之前在广州南站的志愿虽然也看到不少老外，但面对面沟通这还真是第一次，虽然所谓沟通非常简单就是：</p><p>外：Is this line6?<br>我：yes<br>外：How can I get to beijing lu?<br>我：that side（wwwwww）<br>还有一个<br>外：which side can go to the, the park(手指着手机上的文化公园)<br>我：this side</p><p>笑死完全是小学生就OK的程度，虽然我的日常口语指定也就小学生程度吧，纸上答题和面对面沟通真的是很不一样的体验。（其实还有一个疑似老外操着极其熟练的普通话来问路但是回宿舍了仔细想想也可能是新疆人？我不好说）</p><p>总的来说吧，这5个小时里，半小时轮一班岗，还算得上轻松愉快，虽然说各路街坊操着粤语来问我这个出门靠导航的大学生路很是难顶，但总归是靠着看线路图以及“甩锅”给工作人员解决了，某种意义上还提高了我的粤语能力？😇</p><p>以下是事后的麦麦😍😘🥰</p><p><img src="https://ahaguawazi233.github.io/picx-images-hosting/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20231022012528-1024x768.1aoxwvv1qx.webp"></p>]]></content>
    
    
    <categories>
      
      <category>碎碎念</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>累死个人的一天</title>
    <link href="/2023/07/17/%E7%B4%AF%E6%AD%BB%E4%B8%AA%E4%BA%BA%E7%9A%84%E4%B8%80%E5%A4%A9/"/>
    <url>/2023/07/17/%E7%B4%AF%E6%AD%BB%E4%B8%AA%E4%BA%BA%E7%9A%84%E4%B8%80%E5%A4%A9/</url>
    
    <content type="html"><![CDATA[<p>累累累累累累累累累</p><p>学校要搬宿舍换校区了，宿舍的杂七杂八都得打包起来，还好，学校有安排搬家公司搬，搬进新宿舍倒是不难，就是得自己收拾好搬出旧宿舍</p><p>哥们直接在淘宝买了个长度得有一米一的袋子，然后把杂物一装，消息了，还有一些装不下的，直接带回家或者捐给学弟得了</p><p>早上差不多八点起床收拾床上用品，一直在收也没来得及吃饭，过一会收差不多了，想着吃个早饭先，搬家大概率吃不了午饭，结果悲闻台风来袭，以防万一提前出发，得，早饭也没来得及吃。</p><p>哥们甚至是跟车人，可惜跟的不是自己的车，是女生那边的（也就是说我几乎管不了自己的行李了，全靠我的好舍友），早上把自己那个一米一的估计得有五十斤的袋子以及其他几个箱子袋子放到指定地点之后，赶紧跑过去女生那边看看行李什么的什么情况，还好，算是井井有条，唯一意外的就是居然还有其他学院的，结果两个学院的东西放得很近，似乎有一些混了（可能有人现在正在其他学院的地盘辛辛苦苦的找自己的行李）</p><p>然后就继续搬女生们搬行李，消息了，也就我和另一个跟车人在帮忙，虽然说大家确实很忙吧，但是不得不说我和这另外几个老哥肯定是更忙的。在一楼与七楼之间跑上跑下，搬各种行李，搬洗衣机，etc.简单的说就是很累很累很累。（现在的左手还是麻的XD）</p><p>不过不得不说挺服气一些人的，真的不知道这种搬家肯定是充满各种暴力行为吗？就是尽可能不暴力了在这么混乱的环境下肯定也是一团糟，但是他们就是敢直接用一个薄薄的一扯就破的大薄袋子来装自己的行李，对于这种我也只能说丢了挺活该的，一扯就烂，你让师傅怎么搬？不过还好，大部分人都很顺利，目前和我相关的只有一个转专业的同学需要慢慢找行李了，对于她，毕竟刚转，人生地不熟，我也只能表示理解并同情，希望她尽快找到自己的行李。</p><p>然后还有许多想要吐槽的，不过不得不说我们辅导员真的是神仙辅导员，居然！给我！报销了！给搬家师傅买水也算是非常正常的嘛，有一些人，他可以说是事不关己，但是他就是能非常正义凛然地说让师傅自己买。这可能吗？这合理吗？咱这社会一贯以来在这情况都是会递个烟，买瓶水，都是很合理的，但是捏，车里没有他的行李，这次也不需要他跟车，他就可以非常的，额，算了就是非常的额，能干巴巴的说让师傅自己买水。那可不好嘛，毕竟搬家师傅心情不爽甩的也不是你的行李，你也不用坐搬家师傅的车，呵呵，光长嘴了。。。这里感谢我的神仙辅导员给我报销这些杂七杂八的，虽然不是啥大钱吧，但是毕竟我是学生，应该倒贴我50（</p><p>算了就先这样吧，真的是累了困了，今天就没怎么好好吃饭，早饭没吃中饭没吃，晚饭九点多吃的，还有各种重体力劳动，我没低血糖真的是谢天谢地非常牛逼plus ultra pro。白天的话，也就吃了个巧克力，一瓶酸奶，好几瓶水、饮料。只能说我真的牛逼哈哈哈哈哈哈哈hhhhh</p><p>困了睡了おやすみなさい。</p>]]></content>
    
    
    <categories>
      
      <category>碎碎念</category>
      
    </categories>
    
    
    <tags>
      
      <tag>瞎bb</tag>
      
      <tag>发疯</tag>
      
      <tag>累死人了</tag>
      
      <tag>累死非人生物了</tag>
      
      <tag>累累累</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Xray-core配合WARP实现国内流量分流</title>
    <link href="/2023/06/29/xray-core%E9%85%8D%E5%90%88warp%E5%AE%9E%E7%8E%B0%E5%9B%BD%E5%86%85%E6%B5%81%E9%87%8F%E5%88%86%E6%B5%81/"/>
    <url>/2023/06/29/xray-core%E9%85%8D%E5%90%88warp%E5%AE%9E%E7%8E%B0%E5%9B%BD%E5%86%85%E6%B5%81%E9%87%8F%E5%88%86%E6%B5%81/</url>
    
    <content type="html"><![CDATA[<p>在上一篇blog的配置中，我对于国内流量是采用block的策略，但是这多多少少会带来一点不便，有时需要全局代理结果微信之类的就直接断网了。屏蔽回国流量的主要目的是为了隐藏自身，使xray从外部观察起来只是单纯的端口转发，而配合WARP就可以实现在损失一点点延迟的情况下顺利访问国内网站并隐藏自身。</p><p>为了使用WARP，我们首先使用wgcf这个非官方CLI来获取账号以及wireguard配置。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ wget -O wgcf https://github.com/ViRb3/wgcf/releases/download/v2.2.18/wgcf\_2.2.18\_linux\_amd64<br>$ <span class="hljs-built_in">chmod</span> +x wgcf<br>$ ./wgcf register<br>$ ./wgcf generate<br></code></pre></td></tr></table></figure><p>以上命令逐条执行后，我们会在当前文件夹发现wgcf-account.toml和wgcf-profile.conf两个文件。其中wgcf-profile.conf文件中会有我们需要的private key以及public key。</p><p>接下来进行Endpoint IP优选，实测Endpoint IP优选与否对延迟与速率影响极大，我们在这里使用由<a href="https://blog.misaka.rest/">MisakaNo</a>制作的脚本进行优选：</p><p>$ wget -N <a href="https://gitlab.com/Misaka-blog/warp-script/-/raw/main/files/warp-yxip/warp-yxip.sh">https://gitlab.com/Misaka-blog/warp-script/-/raw/main/files/warp-yxip/warp-yxip.sh</a> &amp;&amp; bash warp-yxip.sh</p><p>执行后如下图</p><p><img src="https://ahaguawazi233.github.io/picx-images-hosting/202306282355.8dwtci0hav.webp" alt="202306282355"></p><p>根据提示进行选择即可得到优选IP。</p><p>然后是对xray-core配置文件config.json的修改。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">//routing模块修改如下</span><br><span class="hljs-attr">&quot;routing&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;domainStrategy&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;IPIfNonMatch&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;rules&quot;</span><span class="hljs-punctuation">:</span> \<span class="hljs-punctuation">[</span><br>            <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;field&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;domain&quot;</span><span class="hljs-punctuation">:</span> \<span class="hljs-punctuation">[</span><br>                    <span class="hljs-string">&quot;geosite:category-ads-all&quot;</span><br>                \<span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;outboundTag&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;block&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;field&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;domain&quot;</span><span class="hljs-punctuation">:</span> \<span class="hljs-punctuation">[</span><br>                    <span class="hljs-string">&quot;geosite:cn&quot;</span><br>                \<span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;outboundTag&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;warp-IPv4&quot;</span>  <span class="hljs-comment">//可以修改成自己想要的tag</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;field&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;ip&quot;</span><span class="hljs-punctuation">:</span> \<span class="hljs-punctuation">[</span><br>                    <span class="hljs-string">&quot;geoip:cn&quot;</span><br>                \<span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;outboundTag&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;warp-IPv4&quot;</span>  <span class="hljs-comment">//同上</span><br>            <span class="hljs-punctuation">&#125;</span><br>        \<span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><br><br><span class="hljs-comment">//outbound模块的修改如下</span><br> <span class="hljs-attr">&quot;outbounds&quot;</span><span class="hljs-punctuation">:</span> \<span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;protocol&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;freedom&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;tag&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;direct&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;protocol&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;blackhole&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;tag&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;block&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;protocol&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;wireguard&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;settings&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br><br>            <span class="hljs-attr">&quot;secretKey&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span>  <span class="hljs-comment">//填入先前的private key</span><br>            <span class="hljs-attr">&quot;address&quot;</span><span class="hljs-punctuation">:</span> \<span class="hljs-punctuation">[</span><span class="hljs-string">&quot;172.16.0.2/32&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;2606:4700:110:8c67:2b86:8c3b:6604:7932/128&quot;</span>\<span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span>   <span class="hljs-comment">//此处根据wgcf-profile.conf文件中的Address进行修改</span><br>            <span class="hljs-attr">&quot;peers&quot;</span><span class="hljs-punctuation">:</span> \<span class="hljs-punctuation">[</span><br>                <span class="hljs-punctuation">&#123;</span><br>                    <span class="hljs-attr">&quot;publicKey&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span>  <span class="hljs-comment">//填入先前的public key</span><br>                    <span class="hljs-attr">&quot;endpoint&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span>  <span class="hljs-comment">//将优选的Endpoint IP填入即可，例：162.159.192.90:908</span><br>                    <span class="hljs-attr">&quot;allowedIPs&quot;</span><span class="hljs-punctuation">:</span> \<span class="hljs-punctuation">[</span><br>                        <span class="hljs-string">&quot;0.0.0.0/0&quot;</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-string">&quot;::/0&quot;</span><br>                    \<span class="hljs-punctuation">]</span><br>                <span class="hljs-punctuation">&#125;</span><br>            \<span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;mtu&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1280</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;tag&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;warp-4&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;protocol&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;freedom&quot;</span><span class="hljs-punctuation">,</span>   <br>        <span class="hljs-attr">&quot;settings&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;domainStrategy&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;UseIPv4&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;proxySettings&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;tag&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;warp-4&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;tag&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;warp-IPv4&quot;</span>  <span class="hljs-comment">//前面的tag若修改了这里也要记得改</span><br>        <span class="hljs-punctuation">&#125;</span><br>    \<span class="hljs-punctuation">]</span><br></code></pre></td></tr></table></figure><p>之后，重启xray-core以应用配置。</p><p>$ docker restart xray</p><p>如此即可顺利配置WARP进行使用。接下来是刷WARP+流量的教学。</p><p>WARP与WARP+的区别，从<a href="https://support.cloudflarewarp.com/hc/en-us/articles/360025731113-What-is-the-difference-between-WARP-WARP-and-WARP-Unlimited-">官网</a>我们可以了解到，+版本的速度等各方面会更好一点。</p><p>WARP+目前新人会有10Gb的流量，但是明显不是很够用。但WARP+目前仍然有邀请一个新用户来获得1Gb流量的政策，如此便产生了各类刷流量方法。</p><p>最简单的，在<a href="https://replit.com/@wdm1732418365/warp">这个网站</a>点击右上方的run，并根据提示输入wgcf-account.toml中的device_id即可开始刷流量。缺点是必须在前台运行，不过对于个人使用来说一般刷个1小时就够用很久了。（博主自测刷了大概一个小时刷了150Gb以上的流量）</p><p>然后是使用Github Action来刷流量的办法：</p><p>首先复制以下代码并保存为warp.py文件。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> urllib.request<br><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">import</span> datetime<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> string<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> sys<br>os.system(<span class="hljs-string">&quot;title WARP-PLUS-CLOUDFLARE By ALIILAPRO&quot;</span>)<br>os.system(<span class="hljs-string">&#x27;cls&#x27;</span> <span class="hljs-keyword">if</span> os.name == <span class="hljs-string">&#x27;nt&#x27;</span> <span class="hljs-keyword">else</span> <span class="hljs-string">&#x27;clear&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Getting WARP+ Traffic on Github Actions&#x27;</span>)<br>referrer = os.environ\[<span class="hljs-string">&quot;DEVICEID&quot;</span>\]<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">genString</span>(<span class="hljs-params">stringLength</span>):<br><span class="hljs-keyword">try</span>:<br>letters = string.<span class="hljs-built_in">ascii</span>\_letters + string.digits<br><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span>.join(random.choice(letters) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(stringLength))<br><span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> error:<br><span class="hljs-built_in">print</span>(error)    <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">digitString</span>(<span class="hljs-params">stringLength</span>):<br><span class="hljs-keyword">try</span>:<br>digit = string.digits<br><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span>.join((random.choice(digit) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(stringLength)))    <br><span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> error:<br><span class="hljs-built_in">print</span>(error)<br>url = <span class="hljs-string">f&#x27;https://api.cloudflareclient.com/v0a<span class="hljs-subst">&#123;digitString(<span class="hljs-number">3</span>)&#125;</span>/reg&#x27;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>():<br><span class="hljs-keyword">try</span>:<br>install\_<span class="hljs-built_in">id</span> = genString(<span class="hljs-number">22</span>)<br>body = &#123;<span class="hljs-string">&quot;key&quot;</span>: <span class="hljs-string">&quot;&#123;&#125;=&quot;</span>.<span class="hljs-built_in">format</span>(genString(<span class="hljs-number">43</span>)),<br><span class="hljs-string">&quot;install\_id&quot;</span>: install\_<span class="hljs-built_in">id</span>,<br><span class="hljs-string">&quot;fcm\_token&quot;</span>: <span class="hljs-string">&quot;&#123;&#125;:APA91b&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(install\_<span class="hljs-built_in">id</span>, genString(<span class="hljs-number">134</span>)),<br><span class="hljs-string">&quot;referrer&quot;</span>: referrer,<br><span class="hljs-string">&quot;warp\_enabled&quot;</span>: <span class="hljs-literal">False</span>,<br><span class="hljs-string">&quot;tos&quot;</span>: datetime.datetime.now().isoformat()\[:-<span class="hljs-number">3</span>\] + <span class="hljs-string">&quot;+02:00&quot;</span>,<br><span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;Android&quot;</span>,<br><span class="hljs-string">&quot;locale&quot;</span>: <span class="hljs-string">&quot;es\_ES&quot;</span>&#125;<br>data = json.dumps(body).encode(<span class="hljs-string">&#x27;utf8&#x27;</span>)<br>headers = &#123;<span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;application/json; charset=UTF-8&#x27;</span>,<br><span class="hljs-string">&#x27;Host&#x27;</span>: <span class="hljs-string">&#x27;api.cloudflareclient.com&#x27;</span>,<br><span class="hljs-string">&#x27;Connection&#x27;</span>: <span class="hljs-string">&#x27;Keep-Alive&#x27;</span>,<br><span class="hljs-string">&#x27;Accept-Encoding&#x27;</span>: <span class="hljs-string">&#x27;gzip&#x27;</span>,<br><span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&#x27;okhttp/3.12.1&#x27;</span><br>&#125;<br>req         = urllib.request.Request(url, data, headers)<br>response    = urllib.request.urlopen(req)<br>status\_code = response.getcode()<br><span class="hljs-keyword">return</span> status\_code<br><span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> error:<br><span class="hljs-built_in">print</span>(error)<br><br>g = <span class="hljs-number">0</span><br>b = <span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>result = run()<br><span class="hljs-keyword">if</span> result == <span class="hljs-number">200</span>:<br>g = g + <span class="hljs-number">1</span><br>os.system(<span class="hljs-string">&#x27;cls&#x27;</span> <span class="hljs-keyword">if</span> os.name == <span class="hljs-string">&#x27;nt&#x27;</span> <span class="hljs-keyword">else</span> <span class="hljs-string">&#x27;clear&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Getting WARP+ Traffic&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&quot;</span>)<br>animation = \[<span class="hljs-string">&quot;\[■□□□□□□□□□\] 10%&quot;</span>,<span class="hljs-string">&quot;\[■■□□□□□□□□\] 20%&quot;</span>, <span class="hljs-string">&quot;\[■■■□□□□□□□\] 30%&quot;</span>, <span class="hljs-string">&quot;\[■■■■□□□□□□\] 40%&quot;</span>, <span class="hljs-string">&quot;\[■■■■■□□□□□\] 50%&quot;</span>, <span class="hljs-string">&quot;\[■■■■■■□□□□\] 60%&quot;</span>, <span class="hljs-string">&quot;\[■■■■■■■□□□\] 70%&quot;</span>, <span class="hljs-string">&quot;\[■■■■■■■■□□\] 80%&quot;</span>, <span class="hljs-string">&quot;\[■■■■■■■■■□\] 90%&quot;</span>, <span class="hljs-string">&quot;\[■■■■■■■■■■\] 100%&quot;</span>\] <br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(animation)):<br>time.sleep(<span class="hljs-number">0.5</span>)<br>sys.stdout.write(<span class="hljs-string">&quot;\\r\[+\] Preparing... &quot;</span> + animation\[i % <span class="hljs-built_in">len</span>(animation)\])<br>sys.stdout.flush()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;\\n\[-\] WORK ON ID: <span class="hljs-subst">&#123;referrer&#125;</span>&quot;</span>)    <br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;\[:)\] <span class="hljs-subst">&#123;g&#125;</span> GB has been successfully added to your account.&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;\[#\] Total: <span class="hljs-subst">&#123;g&#125;</span> Good <span class="hljs-subst">&#123;b&#125;</span> Bad&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\[\*\] After 18 seconds, a new request will be sent.&quot;</span>)<br>time.sleep(<span class="hljs-number">18</span>)<br><span class="hljs-keyword">else</span>:<br>b = b + <span class="hljs-number">1</span><br>os.system(<span class="hljs-string">&#x27;cls&#x27;</span> <span class="hljs-keyword">if</span> os.name == <span class="hljs-string">&#x27;nt&#x27;</span> <span class="hljs-keyword">else</span> <span class="hljs-string">&#x27;clear&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Getting WARP+ Traffic&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\[:(\] Error when connecting to server.&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;\[#\] Total: <span class="hljs-subst">&#123;g&#125;</span> Good <span class="hljs-subst">&#123;b&#125;</span> Bad&quot;</span>)<br></code></pre></td></tr></table></figure><p>在自己的GitHub中新建一个repository，将warp.py上传至该repository中。</p><p>进入该repository的action界面，选择set up a workflow yourself，复制黏贴以下内容：</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&#x27;Getting WARP+ Traffic&#x27;</span><br><br><span class="hljs-attribute">on</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">workflow\_dispatch</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">push</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">branches</span><span class="hljs-punctuation">:</span><br>     <span class="hljs-bullet">-</span> <span class="hljs-string">main</span><br>  <span class="hljs-attribute">schedule</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">cron: &#x27;33 8 \* \* \*&#x27;</span><br><br><span class="hljs-attribute">jobs</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">auto\_getting\_traffic</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">runs-on</span><span class="hljs-punctuation">:</span> <span class="hljs-string">ubuntu-latest</span><br>    <span class="hljs-attribute">steps</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">name: &#x27;Checking&#x27;</span><br>        <span class="hljs-attribute">uses</span><span class="hljs-punctuation">:</span> <span class="hljs-string">actions/checkout@v2</span><br><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">name: &#x27;Setting Python&#x27;</span><br>        <span class="hljs-attribute">uses</span><span class="hljs-punctuation">:</span> <span class="hljs-string">actions/setup-python@v1</span><br>        <span class="hljs-attribute">with</span><span class="hljs-punctuation">:</span><br>          <span class="hljs-attribute">python-version</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&#x27;3.x&#x27;</span><br><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">name: &#x27;Getting WARP+ Traffic&#x27;</span><br>        <span class="hljs-attribute">env</span><span class="hljs-punctuation">:</span><br>          <span class="hljs-attribute">DEVICEID</span><span class="hljs-punctuation">:</span> <span class="hljs-string">$&#123;&#123; secrets.DEVICEID &#125;&#125;      </span><br>        <span class="hljs-attribute">run</span><span class="hljs-punctuation">:</span> <span class="hljs-string">python warp.py</span><br></code></pre></td></tr></table></figure><p>点击右方绿色按钮保存。</p><p>转到该repository的setting，设置一个secret，名称为DEVICEID，内容为你的wgcf-account.toml中的device_id，保存。</p><p>回到action页面，选择Getting WARP+ Traffic，并run workflow即可开始刷流量。</p><p>参考：</p><p><a href="https://ednovas.xyz/2021/10/05/warp+/#F-amp-Q">https://ednovas.xyz/2021/10/05/warp+/#F-amp-Q</a></p><p><a href="https://github.com/ViRb3/wgcf">https://github.com/ViRb3/wgcf</a></p><p><a href="https://blog.misaka.rest/2023/03/12/cf-warp-yxip/">https://blog.misaka.rest/2023/03/12/cf-warp-yxip/</a></p><p><a href="https://xtls.github.io/document/level-2/warp.html#%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%BD%BF%E7%94%A8-warp-%E9%93%BE%E5%BC%8F%E4%BB%A3%E7%90%86">https://xtls.github.io/document/level-2/warp.html#%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%BD%BF%E7%94%A8-warp-%E9%93%BE%E5%BC%8F%E4%BB%A3%E7%90%86</a></p>]]></content>
    
    
    <categories>
      
      <category>给自己写的教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WARP</tag>
      
      <tag>WARP+</tag>
      
      <tag>xray-core</tag>
      
      <tag>回国流量</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>记录一下自己配置xray-core</title>
    <link href="/2023/06/23/%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%8B%E8%87%AA%E5%B7%B1%E9%85%8D%E7%BD%AExray-core/"/>
    <url>/2023/06/23/%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%8B%E8%87%AA%E5%B7%B1%E9%85%8D%E7%BD%AExray-core/</url>
    
    <content type="html"><![CDATA[<p>2023年2月，正值农历新年，R佬发布了最新的Reality加密，安全性再上一层楼。</p><p>于是乎，在某天，恰逢XXX发威，非常顺利地将服务转换为Reality，个人体感除了延迟稍高以外（虽然说也就高了一点），非常舒适。</p><p>docker拉取xray-core镜像</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ docker pull teddysun/xray<br></code></pre></td></tr></table></figure><p>在&#x2F;etc&#x2F;xray&#x2F;中配置config,json，即配置的路径为&#x2F;etc&#x2F;xray&#x2F;config.json，以下为.json的内容：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;log&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;loglevel&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;warning&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;routing&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span>    <span class="hljs-comment">//路由，阻断国内网站及广告</span><br>        <span class="hljs-attr">&quot;domainStrategy&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;IPIfNonMatch&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;rules&quot;</span><span class="hljs-punctuation">:</span> \<span class="hljs-punctuation">[</span><br>            <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;field&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;domain&quot;</span><span class="hljs-punctuation">:</span> \<span class="hljs-punctuation">[</span><br>                    <span class="hljs-string">&quot;geosite:category-ads-all&quot;</span><br>                \<span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;outboundTag&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;block&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;field&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;ip&quot;</span><span class="hljs-punctuation">:</span> \<span class="hljs-punctuation">[</span><br>                    <span class="hljs-string">&quot;geoip:cn&quot;</span><br>                \<span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;outboundTag&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;block&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><br>        \<span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;inbounds&quot;</span><span class="hljs-punctuation">:</span> \<span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;listen&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0.0.0.0&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;port&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">443</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;protocol&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;vless&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;settings&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;clients&quot;</span><span class="hljs-punctuation">:</span> \<span class="hljs-punctuation">[</span><br>                    <span class="hljs-punctuation">&#123;</span><br>                        <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span>    <span class="hljs-comment">//随机生成的uuid或是自己输入的小于16位的字符</span><br>                        <span class="hljs-attr">&quot;flow&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;xtls-rprx-vision&quot;</span>    <span class="hljs-comment">//建议使用，避免TLS in TLS</span><br>                    <span class="hljs-punctuation">&#125;</span><br>                \<span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;decryption&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;none&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;streamSettings&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;network&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;tcp&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;security&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;reality&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;realitySettings&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                    <span class="hljs-attr">&quot;show&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;dest&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;www.lovelive-anime.jp:443&quot;</span><span class="hljs-punctuation">,</span>    <span class="hljs-comment">//自行选择域名，推荐白名单域名，后面必须指定端口号，否则报错</span><br>                    <span class="hljs-attr">&quot;xver&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;serverNames&quot;</span><span class="hljs-punctuation">:</span> \<span class="hljs-punctuation">[</span><br>                        <span class="hljs-string">&quot;www.lovelive-anime.jp&quot;</span><br>                    \<span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;privateKey&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span>    <span class="hljs-comment">//使用 ./xray x25519 自行生成</span><br>                    <span class="hljs-attr">&quot;minClientVer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;maxClientVer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;maxTimeDiff&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;shortIds&quot;</span><span class="hljs-punctuation">:</span> \<span class="hljs-punctuation">[</span><br>                        <span class="hljs-string">&quot;&quot;</span>        <span class="hljs-comment">//此处可留空也可填写，用于区分不同客户端</span><br>                    \<span class="hljs-punctuation">]</span><br>                <span class="hljs-punctuation">&#125;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;sniffing&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;enabled&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;destOverride&quot;</span><span class="hljs-punctuation">:</span> \<span class="hljs-punctuation">[</span><br>                    <span class="hljs-string">&quot;http&quot;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-string">&quot;tls&quot;</span><br>                \<span class="hljs-punctuation">]</span><br>            <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    \<span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;outbounds&quot;</span><span class="hljs-punctuation">:</span> \<span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;protocol&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;freedom&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;tag&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;direct&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;protocol&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;blackhole&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;tag&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;block&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    \<span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;policy&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;levels&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;0&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;handshake&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">3</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;connIdle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">180</span><br>            <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>生成公私钥的，由于本人技术力不足，没研究明白怎么进docker container执行命令，于是乎先实际安装了一遍生成了公私钥（乐</p><p>然后是启动container</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ docker run -d --network host --name xray --restart=always -v /etc/xray:/etc/xray teddysun/xray<br></code></pre></td></tr></table></figure><p>（个人偏好使用host模式这样在config.json里改端口即可无需改变端口映射）</p><p>client配置上，使用vless并且直接访问ip，配置Reality正确即可正常访问</p><p>如果有多个服务，想要使用Nginx进行分流的话，在Nginx配置里识别分流的是靠你所”偷“的域名，设置好了就能正常分流啦。</p><p>参考：</p><p><a href="https://github.com/XTLS/Xray-core">https://github.com/XTLS/Xray-core</a></p><p><a href="https://github.com/XTLS/REALITY">https://github.com/XTLS/REALITY</a></p><p><a href="https://hub.docker.com/r/teddysun/xray">https://hub.docker.com/r/teddysun/xray</a></p><p><a href="https://github.com/chika0801/Xray-examples">https://github.com/chika0801/Xray-examples</a></p>]]></content>
    
    
    <categories>
      
      <category>给自己写的教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>xray-core</tag>
      
      <tag>Reality</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>昨日的快乐</title>
    <link href="/2023/06/23/%E6%98%A8%E6%97%A5%E7%9A%84%E5%BF%AB%E4%B9%90/"/>
    <url>/2023/06/23/%E6%98%A8%E6%97%A5%E7%9A%84%E5%BF%AB%E4%B9%90/</url>
    
    <content type="html"><![CDATA[<p>麦门！！麦门！！麦门！！麦门！！麦门！！</p><p>昨天中午吃麦麦，又让我给好评然后送了我一杯新地！</p><p>爽！</p><p>再加上最近常驻的20块钱20块鸡块，1+1穷鬼套餐</p><p>爽！！！</p><p>（真的被撑死了😋）</p><p>然后还给老手机k20pro换了一下电池</p><p>原装的电池居然鼓包了，怪不得手感不对劲，赶紧下单然后在昨天更换了</p><p>耗时40分钟，熟练.jpg</p><p>晚上萨莉亚！萨门～！！！</p><p>自己一个人吃了直接101块钱</p><p>又爽死了😋</p>]]></content>
    
    
    <categories>
      
      <category>碎碎念</category>
      
    </categories>
    
    
    <tags>
      
      <tag>发疯</tag>
      
      <tag>快乐</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>期末月发疯</title>
    <link href="/2023/06/22/%E6%9C%9F%E6%9C%AB%E6%9C%88%E5%8F%91%E7%96%AF/"/>
    <url>/2023/06/22/%E6%9C%9F%E6%9C%AB%E6%9C%88%E5%8F%91%E7%96%AF/</url>
    
    <content type="html"><![CDATA[<p>怎么一个个都放假了？怎么一个个都放假了？怎么一个个都放假了？怎么一个个都放假了？怎么一个个都放假了？怎么一个个都放假了？怎么一个个都放假了？怎么一个个都放假了？怎么一个个都放假了？怎么一个个都放假了？怎么一个个都放假了？怎么一个个都放假了？怎么一个个都放假了？怎么一个个都放假了？</p><p>坤吧电路怎么那么难？坤吧电路怎么那么难？坤吧电路怎么那么难？坤吧电路怎么那么难？坤吧电路怎么那么难？坤吧电路怎么那么难？坤吧电路怎么那么难？坤吧电路怎么那么难？坤吧电路怎么那么难？坤吧电路怎么那么难？坤吧电路怎么那么难？坤吧电路怎么那么难？坤吧电路怎么那么难？坤吧电路怎么那么难？</p><p>坤吧基础物理怎么也嫩难？坤吧基础物理怎么也嫩难？坤吧基础物理怎么也嫩难？坤吧基础物理怎么也嫩难？坤吧基础物理怎么也嫩难？坤吧基础物理怎么也嫩难？坤吧基础物理怎么也嫩难？坤吧基础物理怎么也嫩难？坤吧基础物理怎么也嫩难？</p><p>完了完了挂了挂了完了完了挂了挂了完了完了挂了挂了完了完了挂了挂了完了完了挂了挂了完了完了挂了挂了完了完了挂了挂了完了完了挂了挂了完了完了挂了挂了完了完了挂了挂了完了完了挂了挂了完了完了挂了挂了完了完了挂了挂了完了完了挂了挂了</p><p>我要回家？我要回家？我要回家？我要回家？我要回家！我要回家！我要回家！我要回家！</p><p>所以为啥都放假了啊啊啊啊啊啊啊？！所以为啥都放假了啊啊啊啊啊啊啊？！所以为啥都放假了啊啊啊啊啊啊啊？！所以为啥都放假了啊啊啊啊啊啊啊？！所以为啥都放假了啊啊啊啊啊啊啊？！所以为啥都放假了啊啊啊啊啊啊啊？！所以为啥都放假了啊啊啊啊啊啊啊？！所以为啥都放假了啊啊啊啊啊啊啊？！所以为啥都放假了啊啊啊啊啊啊啊？！所以为啥都放假了啊啊啊啊啊啊啊？！所以为啥都放假了啊啊啊啊啊啊啊？！所以为啥都放假了啊啊啊啊啊啊啊？！所以为啥都放假了啊啊啊啊啊啊啊？！所以为啥都放假了啊啊啊啊啊啊啊？！所以为啥都放假了啊啊啊啊啊啊啊？！</p><p>S属性大爆发？I’m SB！S属性大爆发？I’m SB！S属性大爆发？I’m SB！S属性大爆发？I’m SB！S属性大爆发？I’m SB！S属性大爆发？I’m SB！S属性大爆发？I’m SB！S属性大爆发？I’m SB！S属性大爆发？I’m SB！S属性大爆发？I’m SB！S属性大爆发？I’m SB！S属性大爆发？I’m SB！S属性大爆发？I’m SB！S属性大爆发？I’m SB！S属性大爆发？I’m SB！S属性大爆发？I’m SB！S属性大爆发？I’m SB！</p>]]></content>
    
    
    <categories>
      
      <category>碎碎念</category>
      
    </categories>
    
    
    <tags>
      
      <tag>发疯</tag>
      
      <tag>寄了</tag>
      
      <tag>彻底完蛋</tag>
      
      <tag>白给</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello Wordpress</title>
    <link href="/2023/06/22/hello-wordpress/"/>
    <url>/2023/06/22/hello-wordpress/</url>
    
    <content type="html"><![CDATA[<p>机缘巧合之下收到了这台低价而性能不错的VPS，想了想还没具体地尝试过Wordpress，直接大胆开冲了！</p><p>不得不说Wordpress的界面什么的是真不错啊，没插件没主题就已经感觉比其他的舒服多了。</p>]]></content>
    
    
    <categories>
      
      <category>碎碎念</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
